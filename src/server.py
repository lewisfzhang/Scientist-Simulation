# server.py
# runs python local server that manages visualizations and requests

from flask import *
import subprocess as s
import requests, atexit, os
import html_helper as hh

app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0  # emptying cache so static files update


@app.route('/')
def output():
    # serve index template
    return render_template('index.html')


@app.route('/test')
def test():
    return render_template('viewer.html')


@app.route('/receiver', methods=['POST'])
def worker():
    # if first key in dict is "run", ensures receiver was prompted from website
    args = next(iter(dict(request.form))).split(',')  # js .join() splits array elements by ,
    if args[0] == 'run':
        param = ' '.join(i for i in args[1:])
        # print(' '.join(i for i in args[1:]))
        s.call('sh run.sh '+param, shell=True)  # running program
        return "success"
    else:
        return "invalid request"


@app.route('/helper', methods=['POST'])
def helper():
    # return s.Popen('echo $(cd .. && pwd)', shell=True, stdout=s.PIPE).communicate()[0].decode("utf-8")[1:-1]
    return "http://127.0.0.1:8000"


@app.context_processor
def override_url_for():
    return dict(url_for=dated_url_for)


def dated_url_for(endpoint, **values):
    if endpoint == 'static':
        filename = values.get('filename', None)
        if filename:
            file_path = os.path.join(app.root_path,
                                 endpoint, filename)
            values['q'] = int(os.stat(file_path).st_mtime)
    return url_for(endpoint, **values)


def init_support():
    # start servers, 8000 is for data accessing, 1234 is main server
    try:
        print('requesting data from http://127.0.0.1:8000...')
        requests.get('http://127.0.0.1:8000')
        print('request received from http://127.0.0.1:8000...\n')
    except requests.exceptions.ConnectionError as e:  # server is down, create new server
        print('request failed. creating local server at 127.0.0.1:8000')
        s.Popen('cd ../ && nohup python -m http.server 8000 --bind 127.0.0.1 &', shell=True)
        print('server created!')


# closes other server when program is told to exit
def exit_handler():
    # close local server at 127.0.0.1:8000
    print('closing local server at 127.0.0.1:8000')
    s.call('kill -9 $(lsof -ti:8000)', shell=True)
    s.call('cd ../ && rm nohup.out', shell=True)  # removing log file generated by running nohup


@app.route('/html_buttons', methods=['POST'])
def html_buttons():
    return jsonify(result=hh.html_buttons())


@app.route('/html_switch', methods=['POST'])
def html_switch():
    return jsonify(result=hh.html_switch())


@app.route('/generate_switches', methods=['POST'])
def generate_switches():
    return hh.generate_switches()


@app.route('/generate_buttons', methods=['POST'])
def generate_buttons():
    return hh.generate_buttons()


@app.route('/html_slideshow', methods=['POST'])
def html_slideshow():
    print(jsonify(hh.html_slideshow()))
    return jsonify(hh.html_slideshow())


if __name__ == '__main__':
    # ensure current working directory is in src folder
    if os.getcwd()[-3:] != 'src':
        # assuming we are somewhere inside the git directory
        path = s.Popen('git rev-parse --show-toplevel', shell=True, stdout=s.PIPE).communicate()[0].decode("utf-8")[:-1]
        os.chdir(path + '/src')

    # run!
    s.call('open http://127.0.0.1:1234/', shell=True)
    init_support()
    atexit.register(exit_handler)
    app.run('127.0.0.1', '1234')
